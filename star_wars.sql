-- Unlike classes in python, tables in SQL should always be named as a plural!
-- Convention is that sql commands should be typed in block capitals, and any info that is user decided are in lowercase.

DROP TABLE lightsabers;  -- Need to delete this table FIRST as this table references the characters table.
DROP TABLE characters;  -- Deletes the table called 'characters'

-- The following lines of code will create a database table called 'characters':
CREATE TABLE characters (
    id SERIAL PRIMARY KEY,  -- Creates a unique id for each row, generated by SQL. The 'PRIMARY KEY' text identifies that this is the primary key for this table and these CANNOT be updated.
    name VARCHAR(255),  -- Creates a column called 'name' which is a string with max length of 255 characters.
    darkside BOOLEAN,  -- Creates a column called 'darkside' which is of boolean type.
    age INT  -- Creates a column called 'age' which is an integer.
);  -- Note the commas between each column and the semi-colon at the end.


-- The following lines of code will add data to our 'characters' table: 
-- NOTE: Strings must be entered in single quotes and boolean values are all lowercase in sql.
INSERT INTO characters (name, darkside, age) VALUES ('Obi-Wan Kenobi', false, 27);
INSERT INTO characters (name, darkside, age) VALUES ('Anakin Skywalker', false, 19);
INSERT INTO characters (name, darkside, age) VALUES ('Darth Maul', true, 32);
INSERT INTO characters (name, darkside) VALUES ('Yoda', false);  -- If we don't know the value for a specific column, we have to omit both the column name AND the value. SQL will then autopopulate the relevant space in the table as NULL.
-- Values MUST be entered in the same order as the column names are given, i.e. we could also enter data on line 18 as follows:
-- INSERT INTO characters (age, darkside, name) VALUES (27, false, "Obi-Wan Kenobi");

SELECT * FROM characters; -- Displays everything (*) from the table 'characters'
-- SELECT name FROM characters; -- Displays only the 'name' column from the table 'characters'
-- SELECT COUNT(*) FROM characters;  -- Displays the NUMBER of rows (COUNT(*)) from the table 'characters'
-- SELECT COUNT(age) FROM characters;  -- Displays the NUMBER of rows for which age is non-NULL from the table 'characters'

-- UPDATE characters SET darkside = true; -- Changes the value in the 'darkside' column for ALL rows in the 'characters' table to true.
-- UPDATE characters SET darkside = true WHERE name = 'Anakin Skywalker';  -- Changes the value for Anakin Skywalker ONLY
UPDATE characters SET (name, darkside) = ('Darth Vader', true) WHERE name = 'Anakin Skywalker';  -- Can update multiple column values at once by using round brackets to show the column names to be changed and the new values.

SELECT * FROM characters;

-- DELETE FROM characters;  -- Deletes ALL the rows in the 'characters' table.
DELETE FROM characters WHERE name = 'Darth Maul';  -- Deletes the row in the table where the name is 'Darth Maul'

SELECT * FROM characters;

INSERT INTO characters (name, darkside, age) VALUES ('Stormtrooper', true, 25);
INSERT INTO characters (name, darkside, age) VALUES ('Stormtrooper', true, 25);
INSERT INTO characters (name, darkside, age) VALUES ('Stormtrooper', true, 25);
INSERT INTO characters (name, darkside, age) VALUES ('Stormtrooper', true, 25);
INSERT INTO characters (name, darkside, age) VALUES ('Stormtrooper', true, 25);

-- It can create a problem if there are multiple non-unique rows in a database (as above) as we could easily update / delete the wrong row.
-- Databases therefore have a UNIQUE ID to ensure we can identify every line specifically.
-- This unique id can be autogenerated by sql using the SERIAL data type, as per line 9.
-- The unique id variable can then be used to allow us to update for a specific row as per code below.

UPDATE characters SET age = 26 WHERE id = 9;
-- UPDATE characters SET age = age + 1 WHERE id = 9;  -- An alternative way of doing the above line.

SELECT * FROM characters;

CREATE TABLE lightsabers (
    id SERIAL PRIMARY KEY,
    hilt_metal VARCHAR(255) NOT NULL,  -- Adding 'NOT NULL' will mean sql will throw an error if we try to add a row to the table with no value for this column and not add it - see commented out code in line 66!
    colour VARCHAR(255),
    character_id INT REFERENCES characters(id)  -- The 'REFERENCES' keyword allows us to identify the table (characters) and column (id) that will be used to populate this information. The relevant id values must then be included in the INSERT statements (see below). Note that if an id is used in the INSERT statement that does not exist in the characters table, then an error will occur.
);

INSERT INTO lightsabers (colour, hilt_metal, character_id) VALUES ('green', 'palladium', 1);
INSERT INTO lightsabers (colour, hilt_metal, character_id) VALUES ('red', 'gold', 2);
-- INSERT INTO lightsabers (colour) VALUES ('purple');

SELECT * FROM lightsabers;